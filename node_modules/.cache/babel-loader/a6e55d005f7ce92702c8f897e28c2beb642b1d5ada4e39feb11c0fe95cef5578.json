{"ast":null,"code":"/**\r\n * Servicio de autenticación para manejar tokens JWT\r\n */\n\n// Almacena el usuario y token\nexport const setAuth = userData => {\n  localStorage.setItem('user', JSON.stringify(userData));\n};\n\n// Obtiene los datos del usuario actual\nexport const getAuth = () => {\n  try {\n    const userData = localStorage.getItem('user');\n    return userData ? JSON.parse(userData) : null;\n  } catch (e) {\n    console.error(\"Error al obtener datos de autenticación:\", e);\n    return null;\n  }\n};\n\n// Verifica si hay un usuario autenticado\nexport const isAuthenticated = () => {\n  return getAuth() !== null;\n};\n\n// Obtiene el token JWT\nexport const getToken = () => {\n  const userData = getAuth();\n  return (userData === null || userData === void 0 ? void 0 : userData.token) || null;\n};\n\n// Cierra la sesión\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\n\n// Función para crear headers con autenticación\nexport const authHeader = () => {\n  const token = getToken();\n  console.log(\"Enviando token:\", token ? token.substring(0, 15) + \"...\" : \"ninguno\");\n  return token ? {\n    'Authorization': `JWT ${token}`\n  } : {};\n};","map":{"version":3,"names":["setAuth","userData","localStorage","setItem","JSON","stringify","getAuth","getItem","parse","e","console","error","isAuthenticated","getToken","token","logout","removeItem","authHeader","log","substring"],"sources":["C:/Users/Marc/Desktop/futbol-dashboard/frontend/src/services/auth.js"],"sourcesContent":["/**\r\n * Servicio de autenticación para manejar tokens JWT\r\n */\r\n\r\n// Almacena el usuario y token\r\nexport const setAuth = (userData) => {\r\n  localStorage.setItem('user', JSON.stringify(userData));\r\n};\r\n\r\n// Obtiene los datos del usuario actual\r\nexport const getAuth = () => {\r\n  try {\r\n    const userData = localStorage.getItem('user');\r\n    return userData ? JSON.parse(userData) : null;\r\n  } catch (e) {\r\n    console.error(\"Error al obtener datos de autenticación:\", e);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Verifica si hay un usuario autenticado\r\nexport const isAuthenticated = () => {\r\n  return getAuth() !== null;\r\n};\r\n\r\n// Obtiene el token JWT\r\nexport const getToken = () => {\r\n  const userData = getAuth();\r\n  return userData?.token || null;\r\n};\r\n\r\n// Cierra la sesión\r\nexport const logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Función para crear headers con autenticación\r\nexport const authHeader = () => {\r\n  const token = getToken();\r\n  console.log(\"Enviando token:\", token ? token.substring(0, 15) + \"...\" : \"ninguno\");\r\n  return token ? { 'Authorization': `JWT ${token}` } : {};\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,OAAO,GAAIC,QAAQ,IAAK;EACnCC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;AACxD,CAAC;;AAED;AACA,OAAO,MAAMK,OAAO,GAAGA,CAAA,KAAM;EAC3B,IAAI;IACF,MAAML,QAAQ,GAAGC,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAON,QAAQ,GAAGG,IAAI,CAACI,KAAK,CAACP,QAAQ,CAAC,GAAG,IAAI;EAC/C,CAAC,CAAC,OAAOQ,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEF,CAAC,CAAC;IAC5D,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAON,OAAO,CAAC,CAAC,KAAK,IAAI;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMZ,QAAQ,GAAGK,OAAO,CAAC,CAAC;EAC1B,OAAO,CAAAL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEa,KAAK,KAAI,IAAI;AAChC,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1Bb,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,MAAMH,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxBH,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEJ,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,SAAS,CAAC;EAClF,OAAOL,KAAK,GAAG;IAAE,eAAe,EAAE,OAAOA,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}